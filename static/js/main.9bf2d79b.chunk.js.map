{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/GameInfo.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","key","this","squares","elems","jsx","j","push","renderSquare","React","Component","MoveInfo","moves","history","map","_","move","desc","jumpTo","calculateWinner","lines","length","a","b","c","state","Array","fill","stepNo","xIsNext","resetGame","bind","prevHistory","slice","setState","prevState","step","status","current","winner","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bf2d79b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n          {props.value}\n        </button>\n      );\n}\n\nexport default Square;","import React from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n    // Function to render each square\n    renderSquare(i) {\n        return (\n            <Square\n                key={i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n\n    render() {\n        let elems = [];\n        for (let i = 0; i < 3; i++) {\n            let jsx = [];\n            for (let j = 0; j < 3; j++) {\n                jsx.push(this.renderSquare((i * 3) + j));\n            }\n\n            elems.push(<div key={i} className=\"board-row\">{jsx}</div>);\n        }\n\n        return(\n            <div>\n                {elems}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from \"react\";\n\nfunction MoveInfo (props) {\n    // Display list of moves\n    const moves = props.history.map((_, move) => {\n        const desc = move ?\n            'Go to move #' + move:\n            'Go to game start';\n\n        return (\n            <li key={move}>\n                <button\n                    className=\"move-btn\"\n                    onClick={() => props.jumpTo(move)}>\n                    {desc}\n                </button>\n            </li>\n        )\n    });\n\n    return (\n        <div className=\"move-info\">\n            <ol>{moves}</ol>\n        </div>\n    );\n}\n\nexport default MoveInfo;","import React from 'react';\nimport './App.css';\n\nimport Board from \"./Components/Board\";\nimport MoveInfo from \"./Components/GameInfo\";\n\n\n// Check if any winner exists\nfunction calculateWinner(squares) {\n  const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n      }\n  }\n  return null;\n}\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        }\n      ],\n      stepNo: 0,\n      xIsNext: true,\n    }\n\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  handleClick (i) {\n    const { history, stepNo } = this.state;\n    const prevHistory = history.slice(0, stepNo + 1);\n    const current = history[stepNo];\n    const squares = current.squares.slice();\n\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState((prevState) => ({\n      history: [...prevHistory, {squares}],\n      stepNo: prevState.stepNo + 1,\n      xIsNext: !prevState.xIsNext,\n    }));\n  }\n\n\n  jumpTo(step) {\n    this.setState({\n      stepNo: step,\n      xIsNext: (step%2) === 0,\n    });\n  }\n\n\n  resetGame() {\n    this.setState({\n      history: [\n        {\n          squares: Array(9).fill(null),\n        }\n      ],\n      stepNo: 0,\n      xIsNext: true,\n    });\n  }\n  \n\n  render() {\n    const { history, stepNo, xIsNext } = this.state;\n    const current = history[stepNo];\n    \n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner)\n      status = 'Winner: ' + winner;\n    else\n      status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n    \n    return (\n      <>\n        <h2 className=\"header\">\n          TIC TAC TOE\n        </h2>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <button className=\"reset\" onClick={this.resetGame}>\n              Reset Game\n            </button>\n          </div>\n          <MoveInfo\n            history={history}\n            jumpTo={(i) => this.jumpTo(i)}\n          />\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default Square;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}